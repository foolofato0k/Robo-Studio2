import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

def detectFaceEdges(img):
    img = cv.cvtColor(img, cv.COLOR_BGR2GRAY) # convert to grayscale for processing

    # FACE DETECTION ______________________
    # Detect Face
    face_cascade = cv.CascadeClassifier('haarcascade_frontalface_default.xml')
    faces = face_cascade.detectMultiScale(img, 1.3, 5)

    # Get Region of Interest
    roi = img.copy()
    for (x,y,w,h) in faces:
        roi = roi[y:y+h, x:x+w]
    roi = cv.resize(roi, (200, 200)) # for canvas creation - can comment out if needed
    

    # EDGE DETECTION ______________________
    # Add Gussian Blur
    img_blur = cv.GaussianBlur(roi, (3,3), 0)
    # Detect Edges
    edge_img = cv.Canny(image=img_blur, threshold1=20, threshold2=120) # Canny Edge Detection

    return edge_img

def createPoster(img): # private function
        
        # CREATE POSTER - based on face image shape ___________________________
        buffer = 2
        w, h = img.shape
        canvas = np.zeros((w*buffer,h*buffer),dtype=np.uint8) # create poster
        cw, ch = canvas.shape

        # Casting the original image into the center of the canvas
        o_w = int(cw/buffer) - int(w/buffer)
        o_h = int(ch/buffer) - int(h/buffer)
        
        canvas[o_w:w+o_w, o_h:h+o_h] = img
        canvas = cv.rectangle(canvas,(o_w,o_h),(w+o_w,h+o_h),color=255,thickness=1)

        # ADD TEXT_______________________________
        font_large = 5 # Scale text relative to canvas size
        font_small = font_large * 0.5  # Smaller text

        wanted_pos = (o_w-50, o_h-10)  # Top part
        dead_or_alive_pos = (o_w-50, ch-50)  # Bottom part
        reward_pos = (o_w+50, ch-10)  # Near the bottom center

        canvas = cv.putText(canvas, 'WANTED', org=wanted_pos, fontFace=cv.FONT_HERSHEY_PLAIN, fontScale=font_large, color=255, thickness=1)
        canvas = cv.putText(canvas, 'DEAD OR ALIVE', org=dead_or_alive_pos, fontFace=cv.FONT_HERSHEY_PLAIN, fontScale=font_small, color=255, thickness=1)
        canvas = cv.putText(canvas, '$10', org=reward_pos, fontFace=cv.FONT_HERSHEY_PLAIN, fontScale=font_small, color=255, thickness=1)

        return canvas

def getEdgeGroups(img):
   
   img = cv.threshold(img, 127, 255, cv.THRESH_BINARY)[1] # convert to black and white - with one chanel - I'll search up a better way to do this later
   num_labels, labels_img = cv.connectedComponents(img) # get the groups - mess with the parameters later

   # DICTIONARY _______________________________
   # in the form of:
   #    group_label: [(point in group)]
   #    1 : [(x,y), (x,y), (x,y)]

   edge_groups = {label: [] for label in range(num_labels)} 
   for label in range(1, num_labels):
         edge_groups[label] = np.column_stack(np.where(labels_img == label)).tolist()

   # REMOVE NOISE _____________________________
   min_size = 10 # recreate dictonary with groups larger than 10 points
   edge_groups = {i: group for i, group in edge_groups.items() if len(group) >= min_size}
   
   return edge_groups

def WebcamImg(image):

    cap = cv.VideoCapture(0)
    if not cap.isOpened():
        print("Cannot open camera")
        exit()

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Can't receive frame. Exiting ...")
            break

        cv.imshow('frame', frame)
        if cv.waitKey(1) == ord('s'):
            image = frame
            break
    cap.release()

    return image


if __name__ == '__main__':
     
    image = None
     
    webcam = False
    if webcam:
        image = WebcamImg(image)
        if image == None:
            exit()
            
    else:
        image = cv.imread('test_images/webcam_img.jpg')
     
    # PROCESSING EDGES ________________________________________
    edges = detectFaceEdges(image)
    poster = createPoster(edges)
    groups = getEdgeGroups(poster)

    # SHOWING OUTPUTS _________________________________________
    #cv.imshow('edge image', edges)
    cv.imshow('poster', poster)
    cv.imwrite('test_images/poster.png',poster)

    cv.waitKey(0)
    cv.destroyAllWindows()

    fig, ax = plt.subplots(figsize=(6, 6))
    for i, group in groups.items():
        x, y = zip(*group)
        ax.scatter(x, y, marker='o', s=2, label=f'Group {i}')

    # show one group
    fig2, ax2 = plt.subplots(figsize=(6, 6))
    group = groups.get(1)
    y, x = zip(*group)
    ax2.scatter(x, y, marker='o')

    plt.show()